{
  "address": "0xD2cdce81dC147b04D67AB74c889a8a37efd16919",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract TransferProxy",
          "name": "_transferProxy",
          "type": "address"
        },
        {
          "internalType": "contract ERC20TransferProxy",
          "name": "_erc20TransferProxy",
          "type": "address"
        },
        {
          "internalType": "contract ExchangeStateV1",
          "name": "_state",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sellToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sellTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        }
      ],
      "name": "Buy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sellToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sellTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        }
      ],
      "name": "Cancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyerFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "enum ExchangeDomainV1.AssetType",
                  "name": "assetType",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ExchangeDomainV1.Asset",
              "name": "sellAsset",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "enum ExchangeDomainV1.AssetType",
                  "name": "assetType",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ExchangeDomainV1.Asset",
              "name": "buyAsset",
              "type": "tuple"
            }
          ],
          "internalType": "struct ExchangeDomainV1.OrderKey",
          "name": "key",
          "type": "tuple"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "erc20TransferProxy",
      "outputs": [
        {
          "internalType": "contract ERC20TransferProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum ExchangeDomainV1.AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct ExchangeDomainV1.Asset",
                  "name": "sellAsset",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum ExchangeDomainV1.AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct ExchangeDomainV1.Asset",
                  "name": "buyAsset",
                  "type": "tuple"
                }
              ],
              "internalType": "struct ExchangeDomainV1.OrderKey",
              "name": "key",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "selling",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buying",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExchangeDomainV1.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ExchangeDomainV1.Sig",
          "name": "sig",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "exchange",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum ExchangeDomainV1.AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct ExchangeDomainV1.Asset",
                  "name": "sellAsset",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum ExchangeDomainV1.AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct ExchangeDomainV1.Asset",
                  "name": "buyAsset",
                  "type": "tuple"
                }
              ],
              "internalType": "struct ExchangeDomainV1.OrderKey",
              "name": "key",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "selling",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buying",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExchangeDomainV1.Order",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "prepareMessage",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sellerFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newBeneficiary",
          "type": "address"
        }
      ],
      "name": "setBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_buyerFees",
          "type": "uint256"
        }
      ],
      "name": "setBuyerFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sellerFees",
          "type": "uint256"
        }
      ],
      "name": "setSellerFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "contract ExchangeStateV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferProxy",
      "outputs": [
        {
          "internalType": "contract TransferProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xea5f4b7fb2d48b39dc1d999cc6a6b4bd591e5134caf22b5c4d4660809931c56a",
  "receipt": {
    "to": null,
    "from": "0x2797b82EA7256817A4739dbe2dB96db6c59d230d",
    "contractAddress": "0xD2cdce81dC147b04D67AB74c889a8a37efd16919",
    "transactionIndex": 2,
    "gasUsed": "1876528",
    "logsBloom": "0x
    "blockHash": "0x6f6e77c2f6a47e65c2d6e79f663c220d31c138dba61ff0c2b1478bd0cf777a2d",
    "transactionHash": "0xea5f4b7fb2d48b39dc1d999cc6a6b4bd591e5134caf22b5c4d4660809931c56a",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 5120391,
        "transactionHash": "0xea5f4b7fb2d48b39dc1d999cc6a6b4bd591e5134caf22b5c4d4660809931c56a",
        "address": "0xD2cdce81dC147b04D67AB74c889a8a37efd16919",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002797b82ea7256817a4739dbe2db96db6c59d230d"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x6f6e77c2f6a47e65c2d6e79f663c220d31c138dba61ff0c2b1478bd0cf777a2d"
      }
    ],
    "blockNumber": 5120391,
    "cumulativeGasUsed": "2093917",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x06500204Da871Bd6B702Ba0CD158bB68EC1442B9",
    "0x6D3132515247C5fC1C8AD550136E55C74373B5Ed",
    "0x5D806f5d1737c60FbB26509E8A5CC49d92F6411a",
    "0x0Fc0c315F3b38ca5a3bb7118fa689B9682eeA1E9"
  ],
  "numDeployments": 2,
  "solcInputHash": "32bd763a71b63cbb5b4684956dd20f68",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract TransferProxy\",\"name\":\"_transferProxy\",\"type\":\"address\"},{\"internalType\":\"contract ERC20TransferProxy\",\"name\":\"_erc20TransferProxy\",\"type\":\"address\"},{\"internalType\":\"contract ExchangeStateV1\",\"name\":\"_state\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sellTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sellTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyerFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum ExchangeDomainV1.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct ExchangeDomainV1.Asset\",\"name\":\"sellAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum ExchangeDomainV1.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct ExchangeDomainV1.Asset\",\"name\":\"buyAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct ExchangeDomainV1.OrderKey\",\"name\":\"key\",\"type\":\"tuple\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20TransferProxy\",\"outputs\":[{\"internalType\":\"contract ERC20TransferProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum ExchangeDomainV1.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct ExchangeDomainV1.Asset\",\"name\":\"sellAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum ExchangeDomainV1.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct ExchangeDomainV1.Asset\",\"name\":\"buyAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct ExchangeDomainV1.OrderKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"selling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buying\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeDomainV1.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ExchangeDomainV1.Sig\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"exchange\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum ExchangeDomainV1.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct ExchangeDomainV1.Asset\",\"name\":\"sellAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum ExchangeDomainV1.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct ExchangeDomainV1.Asset\",\"name\":\"buyAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct ExchangeDomainV1.OrderKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"selling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buying\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeDomainV1.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"prepareMessage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellerFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyerFees\",\"type\":\"uint256\"}],\"name\":\"setBuyerFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellerFees\",\"type\":\"uint256\"}],\"name\":\"setSellerFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"contract ExchangeStateV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferProxy\",\"outputs\":[{\"internalType\":\"contract TransferProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ExchangeV1.sol\":\"ExchangeV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/ExchangeV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport \\\"./exchange/ExchangeDomainV1.sol\\\";\\nimport \\\"./exchange/ExchangeStateV1.sol\\\";\\nimport \\\"./utils/Bytes.sol\\\";\\nimport \\\"./utils/String.sol\\\";\\nimport \\\"./utils/Uint.sol\\\";\\nimport \\\"./proxy/ERC20TransferProxy.sol\\\";\\nimport \\\"./proxy/TransferProxy.sol\\\";\\n\\ncontract ExchangeV1 is Ownable, ExchangeDomainV1 {\\n    using SafeMath for uint;\\n    using UintLibrary for uint;\\n    using StringLibrary for string;\\n    using BytesLibrary for bytes32;\\n\\n    enum FeeSide {NONE, SELL, BUY}\\n\\n    event Buy(\\n        address indexed sellToken, uint256 indexed sellTokenId, uint256 sellValue,\\n        address owner,\\n        address buyToken, uint256 buyTokenId, uint256 buyValue,\\n        address buyer,\\n        uint256 amount,\\n        uint256 salt\\n    );\\n\\n    event Cancel(\\n        address indexed sellToken, uint256 indexed sellTokenId,\\n        address owner,\\n        address buyToken, uint256 buyTokenId,\\n        uint256 salt\\n    );\\n\\n    uint256 private constant UINT256_MAX = 2 ** 256 - 1;\\n\\n    address payable public beneficiary;\\n\\n    uint256 public buyerFees = 250;\\n    uint256 public sellerFees = 250;\\n\\n    TransferProxy public transferProxy;\\n    ERC20TransferProxy public erc20TransferProxy;\\n    ExchangeStateV1 public state;\\n\\n    constructor(\\n        TransferProxy _transferProxy, ERC20TransferProxy _erc20TransferProxy, ExchangeStateV1 _state, address payable _beneficiary\\n    ) {\\n        transferProxy = _transferProxy;\\n        erc20TransferProxy = _erc20TransferProxy;\\n        state = _state;\\n        beneficiary = _beneficiary;\\n    }\\n\\n    function setBeneficiary(address payable newBeneficiary) external onlyOwner {\\n        beneficiary = newBeneficiary;\\n    }\\n\\n    function setBuyerFees(uint256 _buyerFees) external onlyOwner {\\n        buyerFees = _buyerFees;\\n    }\\n\\n    function setSellerFees(uint256 _sellerFees) external onlyOwner {\\n        sellerFees = _sellerFees;\\n    }\\n\\n    function exchange(\\n        Order calldata order,\\n        Sig calldata sig,\\n        uint amount,\\n        address buyer\\n    ) payable external {\\n        validateOrderSig(order, sig);\\n        uint paying = order.buying.mul(amount).div(order.selling);\\n        verifyOpenAndModifyOrderState(order.key, order.selling, amount);\\n        require(order.key.sellAsset.assetType != AssetType.ETH, \\\"ETH is not supported on sell side\\\");\\n        if (order.key.buyAsset.assetType == AssetType.ETH) {\\n            validateEthTransfer(paying, buyerFees);\\n        }\\n        FeeSide feeSide = getFeeSide(order.key.sellAsset.assetType, order.key.buyAsset.assetType);\\n        if (buyer == address(0x0)) {\\n            buyer = msg.sender;\\n        }\\n        transferWithFeesPossibility(order.key.sellAsset, amount, order.key.owner, buyer, feeSide == FeeSide.SELL, buyerFees, sellerFees);\\n        transferWithFeesPossibility(order.key.buyAsset, paying, msg.sender, order.key.owner, feeSide == FeeSide.BUY, sellerFees, buyerFees);\\n        emitBuy(order, amount, buyer);\\n    }\\n\\n    function validateEthTransfer(uint value, uint buyerFee) internal view {\\n        uint256 buyerFeeValue = value.bp(buyerFee);\\n        require(msg.value == value + buyerFeeValue, \\\"msg.value is incorrect\\\");\\n    }\\n\\n    function cancel(OrderKey calldata key) external {\\n        require(key.owner == msg.sender, \\\"not an owner\\\");\\n        state.setCompleted(key, UINT256_MAX);\\n        emit Cancel(key.sellAsset.token, key.sellAsset.tokenId, msg.sender, key.buyAsset.token, key.buyAsset.tokenId, key.salt);\\n    }\\n\\n    function validateOrderSig(\\n        Order memory order,\\n        Sig memory sig\\n    ) internal pure {\\n        require(prepareMessage(order).recover(sig.v, sig.r, sig.s) == order.key.owner, \\\"incorrect signature\\\");\\n    }\\n\\n    function prepareMessage(Order memory order) public pure returns (string memory) {\\n        return keccak256(abi.encode(order)).toString();\\n    }\\n\\n    function transferWithFeesPossibility(Asset memory firstType, uint value, address from, address to, bool hasFee, uint256 sellerFee, uint256 buyerFee) internal {\\n        if (!hasFee) {\\n            transfer(firstType, value, from, to);\\n        } else {\\n            transferWithFees(firstType, value, from, to, sellerFee, buyerFee);\\n        }\\n    }\\n\\n    function transfer(Asset memory asset, uint value, address from, address to) internal {\\n        if (asset.assetType == AssetType.ETH) {\\n            payable(to).transfer(value);\\n        } else if (asset.assetType == AssetType.ERC20) {\\n            require(asset.tokenId == 0, \\\"tokenId should be 0\\\");\\n            erc20TransferProxy.erc20safeTransferFrom(IERC20(asset.token), from, to, value);\\n        } else if (asset.assetType == AssetType.ERC721) {\\n            require(value == 1, \\\"value should be 1 for ERC-721\\\");\\n            transferProxy.erc721safeTransferFrom(IERC721(asset.token), from, to, asset.tokenId);\\n        } else {\\n            transferProxy.erc1155safeTransferFrom(IERC1155(asset.token), from, to, asset.tokenId, value, \\\"\\\");\\n        }\\n    }\\n\\n    function transferWithFees(Asset memory firstType, uint value, address from, address to, uint256 sellerFee, uint256 buyerFee) internal {\\n        uint restValue = transferFeeToBeneficiary(firstType, from, value, sellerFee, buyerFee);\\n        transfer(firstType, restValue, from, to);\\n    }\\n\\n    function transferFeeToBeneficiary(Asset memory asset, address from, uint total, uint sellerFee, uint buyerFee) internal returns (uint) {\\n        (uint restValue, uint sellerFeeValue) = subFeeInBp(total, total, sellerFee);\\n        uint buyerFeeValue = total.bp(buyerFee);\\n        uint beneficiaryFee = buyerFeeValue.add(sellerFeeValue);\\n        if (beneficiaryFee > 0) {\\n            transfer(asset, beneficiaryFee, from, beneficiary);\\n        }\\n        return restValue;\\n    }\\n\\n    function emitBuy(Order memory order, uint amount, address buyer) internal {\\n        emit Buy(order.key.sellAsset.token, order.key.sellAsset.tokenId, order.selling,\\n            order.key.owner,\\n            order.key.buyAsset.token, order.key.buyAsset.tokenId, order.buying,\\n            buyer,\\n            amount,\\n            order.key.salt\\n        );\\n    }\\n\\n    function subFeeInBp(uint value, uint total, uint feeInBp) internal pure returns (uint newValue, uint realFee) {\\n        return subFee(value, total.bp(feeInBp));\\n    }\\n\\n    function subFee(uint value, uint fee) internal pure returns (uint newValue, uint realFee) {\\n        if (value > fee) {\\n            newValue = value - fee;\\n            realFee = fee;\\n        } else {\\n            newValue = 0;\\n            realFee = value;\\n        }\\n    }\\n\\n    function verifyOpenAndModifyOrderState(OrderKey memory key, uint selling, uint amount) internal {\\n        uint completed = state.getCompleted(key);\\n        uint newCompleted = completed.add(amount);\\n        require(newCompleted <= selling, \\\"not enough stock of order for buying\\\");\\n        state.setCompleted(key, newCompleted);\\n    }\\n\\n    function getFeeSide(AssetType sellType, AssetType buyType) internal pure returns (FeeSide) {\\n        if (sellType == AssetType.ERC721 && buyType == AssetType.ERC721) {\\n            return FeeSide.NONE;\\n        }\\n        if (uint(sellType) > uint(buyType)) {\\n            return FeeSide.BUY;\\n        }\\n        return FeeSide.SELL;\\n    }\\n}\\n\",\"keccak256\":\"0x3bdce73d3e2c46272f2a892a2375481d123f75f2e9a7a25c133541d39d39d5b1\",\"license\":\"MIT\"},\"contracts/exchange/ExchangeDomainV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.4;\\n\\ncontract ExchangeDomainV1 {\\n\\n    enum AssetType {ETH, ERC20, ERC1155, ERC721}\\n\\n    struct Asset {\\n        address token;\\n        uint tokenId;\\n        AssetType assetType;\\n    }\\n\\n    struct OrderKey {\\n        /* who signed the order */\\n        address owner;\\n        /* random number */\\n        uint salt;\\n\\n        /* what has owner */\\n        Asset sellAsset;\\n\\n        /* what wants owner */\\n        Asset buyAsset;\\n    }\\n\\n    struct Order {\\n        OrderKey key;\\n\\n        uint selling;\\n        uint buying;\\n    }\\n\\n    /* An ECDSA signature. */\\n    struct Sig {\\n        /* v parameter */\\n        uint8 v;\\n        /* r parameter */\\n        bytes32 r;\\n        /* s parameter */\\n        bytes32 s;\\n    }\\n}\\n\",\"keccak256\":\"0xa407e9e38df665baa7bf664fe85380ec0d5a12cb3a41d352babe67c087e1030e\",\"license\":\"MIT\"},\"contracts/exchange/ExchangeStateV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../role/OwnableOperatorRole.sol\\\";\\nimport \\\"./ExchangeDomainV1.sol\\\";\\n\\ncontract ExchangeStateV1 is OwnableOperatorRole {\\n\\n    // keccak256(OrderKey) => completed\\n    mapping(bytes32 => uint256) public completed;\\n\\n    function getCompleted(ExchangeDomainV1.OrderKey calldata key) view external returns (uint256) {\\n        return completed[getCompletedKey(key)];\\n    }\\n\\n    function setCompleted(ExchangeDomainV1.OrderKey calldata key, uint256 newCompleted) external onlyOperator {\\n        completed[getCompletedKey(key)] = newCompleted;\\n    }\\n\\n    function getCompletedKey(ExchangeDomainV1.OrderKey memory key) pure public returns (bytes32) {\\n        return keccak256(abi.encodePacked(key.owner, key.sellAsset.token, key.sellAsset.tokenId, key.buyAsset.token, key.buyAsset.tokenId, key.salt));\\n    }\\n}\\n\",\"keccak256\":\"0x41f394f92572214a0496c980e504d5eb1e64d4db56bb3d3ee412d0a000a7f15f\",\"license\":\"MIT\"},\"contracts/proxy/ERC20TransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../role/OwnableOperatorRole.sol\\\";\\n\\ncontract ERC20TransferProxy is OwnableOperatorRole {\\n\\n    function erc20safeTransferFrom(IERC20 token, address from, address to, uint256 value) external onlyOperator {\\n        require(token.transferFrom(from, to, value), \\\"failure while transferring\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x19dc5ab1eba2bfcaf203fcf3b1a2b6fec69517395dc78e9f1c03103d68d04647\",\"license\":\"MIT\"},\"contracts/proxy/TransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport \\\"../role/OwnableOperatorRole.sol\\\";\\n\\ncontract TransferProxy is OwnableOperatorRole {\\n\\n    function erc721safeTransferFrom(IERC721 token, address from, address to, uint256 tokenId) external onlyOperator {\\n        token.safeTransferFrom(from, to, tokenId);\\n    }\\n\\n    function erc1155safeTransferFrom(IERC1155 token, address from, address to, uint256 id, uint256 value, bytes calldata data) external onlyOperator {\\n        token.safeTransferFrom(from, to, id, value, data);\\n    }\\n}\\n\",\"keccak256\":\"0xfd11b5b395cf4f63a7e21ebdd2512881f02219f333f83fa1911ea7ca76c17740\",\"license\":\"MIT\"},\"contracts/role/OperatorRole.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"../utils/Roles.sol\\\";\\n\\ncontract OperatorRole is Context {\\n    using Roles for Roles.Role;\\n\\n    event OperatorAdded(address indexed account);\\n    event OperatorRemoved(address indexed account);\\n\\n    Roles.Role private _operators;\\n\\n    modifier onlyOperator() {\\n        require(isOperator(_msgSender()), \\\"OperatorRole: caller does not have the Operator role\\\");\\n        _;\\n    }\\n\\n    function isOperator(address account) public view returns (bool) {\\n        return _operators.has(account);\\n    }\\n\\n    function _addOperator(address account) internal {\\n        _operators.add(account);\\n        emit OperatorAdded(account);\\n    }\\n\\n    function _removeOperator(address account) internal {\\n        _operators.remove(account);\\n        emit OperatorRemoved(account);\\n    }\\n}\\n\",\"keccak256\":\"0x6d5a11da40a9bc63a545a6614d6481beb881df411846398266bbf570f988d4e2\",\"license\":\"MIT\"},\"contracts/role/OwnableOperatorRole.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./OperatorRole.sol\\\";\\n\\ncontract OwnableOperatorRole is Ownable, OperatorRole {\\n    function addOperator(address account) external onlyOwner {\\n        _addOperator(account);\\n    }\\n\\n    function removeOperator(address account) external onlyOwner {\\n        _removeOperator(account);\\n    }\\n}\\n\",\"keccak256\":\"0x5cc3c7b805d459f9b7b952a27ad51635f618929d9754ddd2725167e0381fb69e\",\"license\":\"MIT\"},\"contracts/utils/Bytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.4;\\n\\nlibrary BytesLibrary {\\n    function toString(bytes32 value) internal pure returns (string memory) {\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n        bytes memory str = new bytes(64);\\n        for (uint256 i = 0; i < 32; i++) {\\n            str[i*2] = alphabet[uint8(value[i] >> 4)];\\n            str[1+i*2] = alphabet[uint8(value[i] & 0x0f)];\\n        }\\n        return string(str);\\n    }\\n}\\n\",\"keccak256\":\"0x8e357d9830dc3c63ddd59665fb303f6114003daa6a4085758ca6d6334b2c816c\",\"license\":\"MIT\"},\"contracts/utils/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.4;\\n\\nlibrary Roles {\\n    struct Role {\\n        mapping (address => bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\",\"keccak256\":\"0xa6f4bc091d564ead9b17e5fd435edc41f99b309b51cff68914ba2d098ca82b24\",\"license\":\"MIT\"},\"contracts/utils/String.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.4;\\n\\nimport \\\"./Uint.sol\\\";\\n\\nlibrary StringLibrary {\\n    using UintLibrary for uint256;\\n\\n    function append(string memory a, string memory b) internal pure returns (string memory) {\\n        bytes memory ba = bytes(a);\\n        bytes memory bb = bytes(b);\\n        bytes memory bab = new bytes(ba.length + bb.length);\\n        uint k = 0;\\n        for (uint i = 0; i < ba.length; i++) bab[k++] = ba[i];\\n        for (uint i = 0; i < bb.length; i++) bab[k++] = bb[i];\\n        return string(bab);\\n    }\\n\\n    function append(string memory a, string memory b, string memory c) internal pure returns (string memory) {\\n        bytes memory ba = bytes(a);\\n        bytes memory bb = bytes(b);\\n        bytes memory bc = bytes(c);\\n        bytes memory bbb = new bytes(ba.length + bb.length + bc.length);\\n        uint k = 0;\\n        for (uint i = 0; i < ba.length; i++) bbb[k++] = ba[i];\\n        for (uint i = 0; i < bb.length; i++) bbb[k++] = bb[i];\\n        for (uint i = 0; i < bc.length; i++) bbb[k++] = bc[i];\\n        return string(bbb);\\n    }\\n\\n    function recover(string memory message, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        bytes memory msgBytes = bytes(message);\\n        bytes memory fullMessage = concat(\\n            bytes(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\"),\\n            bytes(msgBytes.length.toString()),\\n            msgBytes,\\n            new bytes(0), new bytes(0), new bytes(0), new bytes(0)\\n        );\\n        return ecrecover(keccak256(fullMessage), v, r, s);\\n    }\\n\\n    function concat(bytes memory ba, bytes memory bb, bytes memory bc, bytes memory bd, bytes memory be, bytes memory bf, bytes memory bg) internal pure returns (bytes memory) {\\n        bytes memory resultBytes = new bytes(ba.length + bb.length + bc.length + bd.length + be.length + bf.length + bg.length);\\n        uint k = 0;\\n        for (uint i = 0; i < ba.length; i++) resultBytes[k++] = ba[i];\\n        for (uint i = 0; i < bb.length; i++) resultBytes[k++] = bb[i];\\n        for (uint i = 0; i < bc.length; i++) resultBytes[k++] = bc[i];\\n        for (uint i = 0; i < bd.length; i++) resultBytes[k++] = bd[i];\\n        for (uint i = 0; i < be.length; i++) resultBytes[k++] = be[i];\\n        for (uint i = 0; i < bf.length; i++) resultBytes[k++] = bf[i];\\n        for (uint i = 0; i < bg.length; i++) resultBytes[k++] = bg[i];\\n        return resultBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xedc9b62331b1c6699b8f1f682b5d87252f91af6af5e578716412f041c9a89224\",\"license\":\"MIT\"},\"contracts/utils/Uint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary UintLibrary {\\n    using SafeMath for uint;\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    function bp(uint value, uint bpValue) internal pure returns (uint) {\\n        return value.mul(bpValue).div(10000);\\n    }\\n}\\n\",\"keccak256\":\"0x22820d315d08ae4ae45c47261368d8c454e8cad804c3178ad68e1fde100f6b84\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260fa60025560fa6003553480156200001b57600080fd5b5060405162001f8538038062001f858339810160408190526200003e91620000ed565b62000049336200009d565b600480546001600160a01b039586166001600160a01b03199182161790915560058054948616948216949094179093556006805492851692841692909217909155600180549190931691161790556200016d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000806080858703121562000103578384fd5b8451620001108162000154565b6020860151909450620001238162000154565b6040860151909350620001368162000154565b6060860151909250620001498162000154565b939692955090935050565b6001600160a01b03811681146200016a57600080fd5b50565b611e08806200017d6000396000f3fe6080604052600436106100e85760003560e01c80637545335b1161008a578063c19d93fb11610059578063c19d93fb14610259578063ca120b1f14610279578063f2fde38b14610299578063fee03e9e146102b957600080fd5b80637545335b146101d85780638da5cb5b146101f8578063aeea2c6014610216578063bf4aa9f31461022c57600080fd5b806359ab0f05116100c657806359ab0f051461015f5780636e14afcc146101835780636e667db3146101a3578063715018a6146101c357600080fd5b80631c31f710146100ed57806338af3eed1461010f5780633a1910e51461014c575b600080fd5b3480156100f957600080fd5b5061010d61010836600461193c565b6102d9565b005b34801561011b57600080fd5b5060015461012f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61010d61015a3660046119c1565b61032e565b34801561016b57600080fd5b5061017560035481565b604051908152602001610143565b34801561018f57600080fd5b5061010d61019e366004611ad8565b610565565b3480156101af57600080fd5b5060045461012f906001600160a01b031681565b3480156101cf57600080fd5b5061010d610594565b3480156101e457600080fd5b5061010d6101f3366004611ad8565b6105ca565b34801561020457600080fd5b506000546001600160a01b031661012f565b34801561022257600080fd5b5061017560025481565b34801561023857600080fd5b5061024c610247366004611a23565b6105f9565b6040516101439190611bca565b34801561026557600080fd5b5060065461012f906001600160a01b031681565b34801561028557600080fd5b5061010d61029436600461198d565b610630565b3480156102a557600080fd5b5061010d6102b436600461193c565b610775565b3480156102c557600080fd5b5060055461012f906001600160a01b031681565b6000546001600160a01b0316331461030c5760405162461bcd60e51b815260040161030390611c1d565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b61035461034036869003860186611a23565b61034f36869003860186611a66565b610810565b600061037461010086013561036e61012088013586610895565b906108a8565b9050610394610388368790038701876119a5565b866101000135856108b4565b60006103a660a0870160808801611958565b60038111156103c557634e487b7160e01b600052602160045260246000fd5b141561041d5760405162461bcd60e51b815260206004820152602160248201527f455448206973206e6f7420737570706f72746564206f6e2073656c6c207369646044820152606560f81b6064820152608401610303565b6000610430610100870160e08801611958565b600381111561044f57634e487b7160e01b600052602160045260246000fd5b14156104615761046181600254610a0c565b600061048c61047660a0880160808901611958565b610487610100890160e08a01611958565b610a70565b90506001600160a01b0383166104a0573392505b6104f26104b536889003880160408901611972565b856104c360208a018a61193c565b8660018660028111156104e657634e487b7160e01b600052602160045260246000fd5b14600254600354610b24565b61054461050736889003880160a08901611972565b833361051660208b018b61193c565b600286600281111561053857634e487b7160e01b600052602160045260246000fd5b14600354600254610b24565b61055d61055636889003880188611a23565b8585610b51565b505050505050565b6000546001600160a01b0316331461058f5760405162461bcd60e51b815260040161030390611c1d565b600355565b6000546001600160a01b031633146105be5760405162461bcd60e51b815260040161030390611c1d565b6105c86000610bf5565b565b6000546001600160a01b031633146105f45760405162461bcd60e51b815260040161030390611c1d565b600255565b606061062a8260405160200161060f9190611cc3565b60405160208183030381529060405280519060200120610c45565b92915050565b3361063e602083018361193c565b6001600160a01b0316146106835760405162461bcd60e51b815260206004820152600c60248201526b3737ba1030b71037bbb732b960a11b6044820152606401610303565b600654604051631d03b74d60e11b81526001600160a01b0390911690633a076e9a906106b790849060001990600401611c52565b600060405180830381600087803b1580156106d157600080fd5b505af11580156106e5573d6000803e3d6000fd5b50505060608201803591506106fd906040840161193c565b6001600160a01b03167fbfe0e802e586c99960de1a111c80f598b281996d65080d74dbe29986f55b274a3361073860c0860160a0870161193c565b604080516001600160a01b0393841681529190921660208083019190915260c087013582840152860135606082015290519081900360800190a350565b6000546001600160a01b0316331461079f5760405162461bcd60e51b815260040161030390611c1d565b6001600160a01b0381166108045760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610303565b61080d81610bf5565b50565b8160000151600001516001600160a01b031661084582600001518360200151846040015161083d876105f9565b929190610df9565b6001600160a01b0316146108915760405162461bcd60e51b8152602060048201526013602482015272696e636f7272656374207369676e617475726560681b6044820152606401610303565b5050565b60006108a18284611d55565b9392505050565b60006108a18284611d41565b6006546040516303ec000360e61b81526000916001600160a01b03169063fb0000c0906108e5908790600401611ca5565b60206040518083038186803b1580156108fd57600080fd5b505afa158015610911573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109359190611af0565b905060006109438284610eee565b9050838111156109a15760405162461bcd60e51b8152602060048201526024808201527f6e6f7420656e6f7567682073746f636b206f66206f7264657220666f7220627560448201526379696e6760e01b6064820152608401610303565b600654604051631d03b74d60e11b81526001600160a01b0390911690633a076e9a906109d39088908590600401611cb4565b600060405180830381600087803b1580156109ed57600080fd5b505af1158015610a01573d6000803e3d6000fd5b505050505050505050565b6000610a188383610efa565b9050610a248184611d29565b3414610a6b5760405162461bcd60e51b81526020600482015260166024820152751b5cd9cb9d985b1d59481a5cc81a5b98dbdc9c9958dd60521b6044820152606401610303565b505050565b60006003836003811115610a9457634e487b7160e01b600052602160045260246000fd5b148015610ac057506003826003811115610abe57634e487b7160e01b600052602160045260246000fd5b145b15610acd5750600061062a565b816003811115610aed57634e487b7160e01b600052602160045260246000fd5b836003811115610b0d57634e487b7160e01b600052602160045260246000fd5b1115610b1b5750600261062a565b50600192915050565b82610b3a57610b3587878787610f0c565b610b48565b610b488787878786866111c8565b50505050505050565b82516040808201516020808201519151818801518551606080880151805190860151888d01519987015189519586526001600160a01b03948516978601979097529083168489015290830152608082019690965286861660a082015260c0810188905260e081019290925292519193909216917fdddcdb07e460849cf04a4445b7af9faf01b7f5c7ba75deaf969ac5ed830312c391908190036101000190a3505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080518082018252601081526f181899199a1a9b1b9c1cb0b131b232b360811b6020820152815182815260608181018452926000919060208201818036833701905050905060005b6020811015610df157826004868360208110610cba57634e487b7160e01b600052603260045260246000fd5b1a60f81b6001600160f81b031916901c60f81c60ff1681518110610cee57634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b03191682610d09836002611d55565b81518110610d2757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535082858260208110610d5f57634e487b7160e01b600052603260045260246000fd5b825191901a600f16908110610d8457634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b03191682610d9f836002611d55565b610daa906001611d29565b81518110610dc857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535080610de981611d8b565b915050610c8e565b509392505050565b6000808590506000610e716040518060400160405280601a81526020017f19457468657265756d205369676e6564204d6573736167653a0a000000000000815250610e4484516111e5565b60408051600080825260208201818152828401828152606084019283526080840190945288939091611307565b90506001818051906020012087878760405160008152602001604052604051610eb6949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610ed8573d6000803e3d6000fd5b5050604051601f19015198975050505050505050565b60006108a18284611d29565b60006108a161271061036e8585610895565b600084604001516003811115610f3257634e487b7160e01b600052602160045260246000fd5b1415610f74576040516001600160a01b0382169084156108fc029085906000818181858888f19350505050158015610f6e573d6000803e3d6000fd5b506111c2565b600184604001516003811115610f9a57634e487b7160e01b600052602160045260246000fd5b141561106557602084015115610fe85760405162461bcd60e51b81526020600482015260136024820152720746f6b656e49642073686f756c64206265203606c1b6044820152606401610303565b600554845160405163776062c360e01b81526001600160a01b039182166004820152848216602482015283821660448201526064810186905291169063776062c3906084015b600060405180830381600087803b15801561104857600080fd5b505af115801561105c573d6000803e3d6000fd5b505050506111c2565b60038460400151600381111561108b57634e487b7160e01b600052602160045260246000fd5b141561113057826001146110e15760405162461bcd60e51b815260206004820152601d60248201527f76616c75652073686f756c64206265203120666f72204552432d3732310000006044820152606401610303565b6004805485516020870151604051637b84dc8360e11b81526001600160a01b0392831694810194909452858216602485015284821660448501526064840152169063f709b9069060840161102e565b6004805485516020870151604051639c1c2ee960e01b81526001600160a01b03928316948101949094528582166024850152848216604485015260648401526084830186905260c060a4840152600060c48401521690639c1c2ee99060e401600060405180830381600087803b1580156111a957600080fd5b505af11580156111bd573d6000803e3d6000fd5b505050505b50505050565b60006111d787868886866117a7565b9050610b4887828787610f0c565b6060816112095750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611233578061121d81611d8b565b915061122c9050600a83611d41565b915061120d565b60008167ffffffffffffffff81111561125c57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611286576020820181803683370190505b5090505b84156112ff5761129b600183611d74565b91506112a8600a86611da6565b6112b3906030611d29565b60f81b8183815181106112d657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506112f8600a86611d41565b945061128a565b949350505050565b6060600082518451865188518a518c518e516113239190611d29565b61132d9190611d29565b6113379190611d29565b6113419190611d29565b61134b9190611d29565b6113559190611d29565b67ffffffffffffffff81111561137b57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156113a5576020820181803683370190505b5090506000805b8a51811015611438578a81815181106113d557634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b03191683836113ef81611d8b565b94508151811061140f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053508061143081611d8b565b9150506113ac565b5060005b89518110156114c85789818151811061146557634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916838361147f81611d8b565b94508151811061149f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350806114c081611d8b565b91505061143c565b5060005b8851811015611558578881815181106114f557634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916838361150f81611d8b565b94508151811061152f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053508061155081611d8b565b9150506114cc565b5060005b87518110156115e85787818151811061158557634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916838361159f81611d8b565b9450815181106115bf57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350806115e081611d8b565b91505061155c565b5060005b86518110156116785786818151811061161557634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916838361162f81611d8b565b94508151811061164f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053508061167081611d8b565b9150506115ec565b5060005b8551811015611708578581815181106116a557634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b03191683836116bf81611d8b565b9450815181106116df57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053508061170081611d8b565b91505061167c565b5060005b84518110156117985784818151811061173557634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916838361174f81611d8b565b94508151811061176f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053508061179081611d8b565b91505061170c565b50909998505050505050505050565b60008060006117b7868787611807565b909250905060006117c88786610efa565b905060006117d68284610eee565b905080156117f9576001546117f9908b9083908c906001600160a01b0316610f0c565b509198975050505050505050565b60008061181d856118188686610efa565b611829565b91509150935093915050565b600080828411156118485761183e8385611d74565b915082905061184f565b5060009050825b9250929050565b80356004811061186557600080fd5b919050565b60006060828403121561187b578081fd5b611883611cf2565b9050813561189081611de6565b8152602082810135908201526118a860408301611856565b604082015292915050565b600061010082840312156118c5578081fd5b6040516080810181811067ffffffffffffffff821117156118f457634e487b7160e01b83526041600452602483fd5b604052905080823561190581611de6565b81526020838101359082015261191e846040850161186a565b60408201526119308460a0850161186a565b60608201525092915050565b60006020828403121561194d578081fd5b81356108a181611de6565b600060208284031215611969578081fd5b6108a182611856565b600060608284031215611983578081fd5b6108a1838361186a565b6000610100828403121561199f578081fd5b50919050565b600061010082840312156119b7578081fd5b6108a183836118b3565b6000806000808486036101e08112156119d8578384fd5b610140808212156119e7578485fd5b869550606061013f19830112156119fc578485fd5b86019350506101a085013591506101c0850135611a1881611de6565b939692955090935050565b60006101408284031215611a35578081fd5b611a3d611cf2565b611a4784846118b3565b8152610100830135602082015261012090920135604083015250919050565b600060608284031215611a77578081fd5b6040516060810181811067ffffffffffffffff82111715611aa657634e487b7160e01b83526041600452602483fd5b604052823560ff81168114611ab9578283fd5b8152602083810135908201526040928301359281019290925250919050565b600060208284031215611ae9578081fd5b5035919050565b600060208284031215611b01578081fd5b5051919050565b60048110611b2657634e487b7160e01b600052602160045260246000fd5b9052565b8035611b3581611de6565b6001600160a01b0316825260208181013590830152611b5660408201611856565b610a6b6040840182611b08565b80516001600160a01b031682526020808201519083015260408082015190610a6b90840182611b08565b80516001600160a01b031682526020808201519083015260408082015190611bb790840182611b63565b506060810151610a6b60a0840182611b63565b6000602080835283518082850152825b81811015611bf657858101830151858201604001528201611bda565b81811115611c075783604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b61012081018335611c6281611de6565b6001600160a01b0316825260208481013590830152611c876040808401908601611b2a565b611c9760a0830160a08601611b2a565b826101008301529392505050565b610100810161062a8284611b8d565b6101208101611c978285611b8d565b600061014082019050611cd7828451611b8d565b60208301516101008301526040909201516101209091015290565b6040516060810167ffffffffffffffff81118282101715611d2357634e487b7160e01b600052604160045260246000fd5b60405290565b60008219821115611d3c57611d3c611dba565b500190565b600082611d5057611d50611dd0565b500490565b6000816000190483118215151615611d6f57611d6f611dba565b500290565b600082821015611d8657611d86611dba565b500390565b6000600019821415611d9f57611d9f611dba565b5060010190565b600082611db557611db5611dd0565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b038116811461080d57600080fdfea164736f6c6343000804000a",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c80637545335b1161008a578063c19d93fb11610059578063c19d93fb14610259578063ca120b1f14610279578063f2fde38b14610299578063fee03e9e146102b957600080fd5b80637545335b146101d85780638da5cb5b146101f8578063aeea2c6014610216578063bf4aa9f31461022c57600080fd5b806359ab0f05116100c657806359ab0f051461015f5780636e14afcc146101835780636e667db3146101a3578063715018a6146101c357600080fd5b80631c31f710146100ed57806338af3eed1461010f5780633a1910e51461014c575b600080fd5b3480156100f957600080fd5b5061010d61010836600461193c565b6102d9565b005b34801561011b57600080fd5b5060015461012f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61010d61015a3660046119c1565b61032e565b34801561016b57600080fd5b5061017560035481565b604051908152602001610143565b34801561018f57600080fd5b5061010d61019e366004611ad8565b610565565b3480156101af57600080fd5b5060045461012f906001600160a01b031681565b3480156101cf57600080fd5b5061010d610594565b3480156101e457600080fd5b5061010d6101f3366004611ad8565b6105ca565b34801561020457600080fd5b506000546001600160a01b031661012f565b34801561022257600080fd5b5061017560025481565b34801561023857600080fd5b5061024c610247366004611a23565b6105f9565b6040516101439190611bca565b34801561026557600080fd5b5060065461012f906001600160a01b031681565b34801561028557600080fd5b5061010d61029436600461198d565b610630565b3480156102a557600080fd5b5061010d6102b436600461193c565b610775565b3480156102c557600080fd5b5060055461012f906001600160a01b031681565b6000546001600160a01b0316331461030c5760405162461bcd60e51b815260040161030390611c1d565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b61035461034036869003860186611a23565b61034f36869003860186611a66565b610810565b600061037461010086013561036e61012088013586610895565b906108a8565b9050610394610388368790038701876119a5565b866101000135856108b4565b60006103a660a0870160808801611958565b60038111156103c557634e487b7160e01b600052602160045260246000fd5b141561041d5760405162461bcd60e51b815260206004820152602160248201527f455448206973206e6f7420737570706f72746564206f6e2073656c6c207369646044820152606560f81b6064820152608401610303565b6000610430610100870160e08801611958565b600381111561044f57634e487b7160e01b600052602160045260246000fd5b14156104615761046181600254610a0c565b600061048c61047660a0880160808901611958565b610487610100890160e08a01611958565b610a70565b90506001600160a01b0383166104a0573392505b6104f26104b536889003880160408901611972565b856104c360208a018a61193c565b8660018660028111156104e657634e487b7160e01b600052602160045260246000fd5b14600254600354610b24565b61054461050736889003880160a08901611972565b833361051660208b018b61193c565b600286600281111561053857634e487b7160e01b600052602160045260246000fd5b14600354600254610b24565b61055d61055636889003880188611a23565b8585610b51565b505050505050565b6000546001600160a01b0316331461058f5760405162461bcd60e51b815260040161030390611c1d565b600355565b6000546001600160a01b031633146105be5760405162461bcd60e51b815260040161030390611c1d565b6105c86000610bf5565b565b6000546001600160a01b031633146105f45760405162461bcd60e51b815260040161030390611c1d565b600255565b606061062a8260405160200161060f9190611cc3565b60405160208183030381529060405280519060200120610c45565b92915050565b3361063e602083018361193c565b6001600160a01b0316146106835760405162461bcd60e51b815260206004820152600c60248201526b3737ba1030b71037bbb732b960a11b6044820152606401610303565b600654604051631d03b74d60e11b81526001600160a01b0390911690633a076e9a906106b790849060001990600401611c52565b600060405180830381600087803b1580156106d157600080fd5b505af11580156106e5573d6000803e3d6000fd5b50505060608201803591506106fd906040840161193c565b6001600160a01b03167fbfe0e802e586c99960de1a111c80f598b281996d65080d74dbe29986f55b274a3361073860c0860160a0870161193c565b604080516001600160a01b0393841681529190921660208083019190915260c087013582840152860135606082015290519081900360800190a350565b6000546001600160a01b0316331461079f5760405162461bcd60e51b815260040161030390611c1d565b6001600160a01b0381166108045760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610303565b61080d81610bf5565b50565b8160000151600001516001600160a01b031661084582600001518360200151846040015161083d876105f9565b929190610df9565b6001600160a01b0316146108915760405162461bcd60e51b8152602060048201526013602482015272696e636f7272656374207369676e617475726560681b6044820152606401610303565b5050565b60006108a18284611d55565b9392505050565b60006108a18284611d41565b6006546040516303ec000360e61b81526000916001600160a01b03169063fb0000c0906108e5908790600401611ca5565b60206040518083038186803b1580156108fd57600080fd5b505afa158015610911573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109359190611af0565b905060006109438284610eee565b9050838111156109a15760405162461bcd60e51b8152602060048201526024808201527f6e6f7420656e6f7567682073746f636b206f66206f7264657220666f7220627560448201526379696e6760e01b6064820152608401610303565b600654604051631d03b74d60e11b81526001600160a01b0390911690633a076e9a906109d39088908590600401611cb4565b600060405180830381600087803b1580156109ed57600080fd5b505af1158015610a01573d6000803e3d6000fd5b505050505050505050565b6000610a188383610efa565b9050610a248184611d29565b3414610a6b5760405162461bcd60e51b81526020600482015260166024820152751b5cd9cb9d985b1d59481a5cc81a5b98dbdc9c9958dd60521b6044820152606401610303565b505050565b60006003836003811115610a9457634e487b7160e01b600052602160045260246000fd5b148015610ac057506003826003811115610abe57634e487b7160e01b600052602160045260246000fd5b145b15610acd5750600061062a565b816003811115610aed57634e487b7160e01b600052602160045260246000fd5b836003811115610b0d57634e487b7160e01b600052602160045260246000fd5b1115610b1b5750600261062a565b50600192915050565b82610b3a57610b3587878787610f0c565b610b48565b610b488787878786866111c8565b50505050505050565b82516040808201516020808201519151818801518551606080880151805190860151888d01519987015189519586526001600160a01b03948516978601979097529083168489015290830152608082019690965286861660a082015260c0810188905260e081019290925292519193909216917fdddcdb07e460849cf04a4445b7af9faf01b7f5c7ba75deaf969ac5ed830312c391908190036101000190a3505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080518082018252601081526f181899199a1a9b1b9c1cb0b131b232b360811b6020820152815182815260608181018452926000919060208201818036833701905050905060005b6020811015610df157826004868360208110610cba57634e487b7160e01b600052603260045260246000fd5b1a60f81b6001600160f81b031916901c60f81c60ff1681518110610cee57634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b03191682610d09836002611d55565b81518110610d2757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535082858260208110610d5f57634e487b7160e01b600052603260045260246000fd5b825191901a600f16908110610d8457634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b03191682610d9f836002611d55565b610daa906001611d29565b81518110610dc857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535080610de981611d8b565b915050610c8e565b509392505050565b6000808590506000610e716040518060400160405280601a81526020017f19457468657265756d205369676e6564204d6573736167653a0a000000000000815250610e4484516111e5565b60408051600080825260208201818152828401828152606084019283526080840190945288939091611307565b90506001818051906020012087878760405160008152602001604052604051610eb6949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610ed8573d6000803e3d6000fd5b5050604051601f19015198975050505050505050565b60006108a18284611d29565b60006108a161271061036e8585610895565b600084604001516003811115610f3257634e487b7160e01b600052602160045260246000fd5b1415610f74576040516001600160a01b0382169084156108fc029085906000818181858888f19350505050158015610f6e573d6000803e3d6000fd5b506111c2565b600184604001516003811115610f9a57634e487b7160e01b600052602160045260246000fd5b141561106557602084015115610fe85760405162461bcd60e51b81526020600482015260136024820152720746f6b656e49642073686f756c64206265203606c1b6044820152606401610303565b600554845160405163776062c360e01b81526001600160a01b039182166004820152848216602482015283821660448201526064810186905291169063776062c3906084015b600060405180830381600087803b15801561104857600080fd5b505af115801561105c573d6000803e3d6000fd5b505050506111c2565b60038460400151600381111561108b57634e487b7160e01b600052602160045260246000fd5b141561113057826001146110e15760405162461bcd60e51b815260206004820152601d60248201527f76616c75652073686f756c64206265203120666f72204552432d3732310000006044820152606401610303565b6004805485516020870151604051637b84dc8360e11b81526001600160a01b0392831694810194909452858216602485015284821660448501526064840152169063f709b9069060840161102e565b6004805485516020870151604051639c1c2ee960e01b81526001600160a01b03928316948101949094528582166024850152848216604485015260648401526084830186905260c060a4840152600060c48401521690639c1c2ee99060e401600060405180830381600087803b1580156111a957600080fd5b505af11580156111bd573d6000803e3d6000fd5b505050505b50505050565b60006111d787868886866117a7565b9050610b4887828787610f0c565b6060816112095750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611233578061121d81611d8b565b915061122c9050600a83611d41565b915061120d565b60008167ffffffffffffffff81111561125c57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611286576020820181803683370190505b5090505b84156112ff5761129b600183611d74565b91506112a8600a86611da6565b6112b3906030611d29565b60f81b8183815181106112d657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506112f8600a86611d41565b945061128a565b949350505050565b6060600082518451865188518a518c518e516113239190611d29565b61132d9190611d29565b6113379190611d29565b6113419190611d29565b61134b9190611d29565b6113559190611d29565b67ffffffffffffffff81111561137b57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156113a5576020820181803683370190505b5090506000805b8a51811015611438578a81815181106113d557634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b03191683836113ef81611d8b565b94508151811061140f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053508061143081611d8b565b9150506113ac565b5060005b89518110156114c85789818151811061146557634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916838361147f81611d8b565b94508151811061149f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350806114c081611d8b565b91505061143c565b5060005b8851811015611558578881815181106114f557634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916838361150f81611d8b565b94508151811061152f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053508061155081611d8b565b9150506114cc565b5060005b87518110156115e85787818151811061158557634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916838361159f81611d8b565b9450815181106115bf57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350806115e081611d8b565b91505061155c565b5060005b86518110156116785786818151811061161557634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916838361162f81611d8b565b94508151811061164f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053508061167081611d8b565b9150506115ec565b5060005b8551811015611708578581815181106116a557634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b03191683836116bf81611d8b565b9450815181106116df57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053508061170081611d8b565b91505061167c565b5060005b84518110156117985784818151811061173557634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916838361174f81611d8b565b94508151811061176f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053508061179081611d8b565b91505061170c565b50909998505050505050505050565b60008060006117b7868787611807565b909250905060006117c88786610efa565b905060006117d68284610eee565b905080156117f9576001546117f9908b9083908c906001600160a01b0316610f0c565b509198975050505050505050565b60008061181d856118188686610efa565b611829565b91509150935093915050565b600080828411156118485761183e8385611d74565b915082905061184f565b5060009050825b9250929050565b80356004811061186557600080fd5b919050565b60006060828403121561187b578081fd5b611883611cf2565b9050813561189081611de6565b8152602082810135908201526118a860408301611856565b604082015292915050565b600061010082840312156118c5578081fd5b6040516080810181811067ffffffffffffffff821117156118f457634e487b7160e01b83526041600452602483fd5b604052905080823561190581611de6565b81526020838101359082015261191e846040850161186a565b60408201526119308460a0850161186a565b60608201525092915050565b60006020828403121561194d578081fd5b81356108a181611de6565b600060208284031215611969578081fd5b6108a182611856565b600060608284031215611983578081fd5b6108a1838361186a565b6000610100828403121561199f578081fd5b50919050565b600061010082840312156119b7578081fd5b6108a183836118b3565b6000806000808486036101e08112156119d8578384fd5b610140808212156119e7578485fd5b869550606061013f19830112156119fc578485fd5b86019350506101a085013591506101c0850135611a1881611de6565b939692955090935050565b60006101408284031215611a35578081fd5b611a3d611cf2565b611a4784846118b3565b8152610100830135602082015261012090920135604083015250919050565b600060608284031215611a77578081fd5b6040516060810181811067ffffffffffffffff82111715611aa657634e487b7160e01b83526041600452602483fd5b604052823560ff81168114611ab9578283fd5b8152602083810135908201526040928301359281019290925250919050565b600060208284031215611ae9578081fd5b5035919050565b600060208284031215611b01578081fd5b5051919050565b60048110611b2657634e487b7160e01b600052602160045260246000fd5b9052565b8035611b3581611de6565b6001600160a01b0316825260208181013590830152611b5660408201611856565b610a6b6040840182611b08565b80516001600160a01b031682526020808201519083015260408082015190610a6b90840182611b08565b80516001600160a01b031682526020808201519083015260408082015190611bb790840182611b63565b506060810151610a6b60a0840182611b63565b6000602080835283518082850152825b81811015611bf657858101830151858201604001528201611bda565b81811115611c075783604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b61012081018335611c6281611de6565b6001600160a01b0316825260208481013590830152611c876040808401908601611b2a565b611c9760a0830160a08601611b2a565b826101008301529392505050565b610100810161062a8284611b8d565b6101208101611c978285611b8d565b600061014082019050611cd7828451611b8d565b60208301516101008301526040909201516101209091015290565b6040516060810167ffffffffffffffff81118282101715611d2357634e487b7160e01b600052604160045260246000fd5b60405290565b60008219821115611d3c57611d3c611dba565b500190565b600082611d5057611d50611dd0565b500490565b6000816000190483118215151615611d6f57611d6f611dba565b500290565b600082821015611d8657611d86611dba565b500390565b6000600019821415611d9f57611d9f611dba565b5060010190565b600082611db557611db5611dd0565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b038116811461080d57600080fdfea164736f6c6343000804000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ExchangeV1.sol:ExchangeV1",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2816,
        "contract": "contracts/ExchangeV1.sol:ExchangeV1",
        "label": "beneficiary",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 2819,
        "contract": "contracts/ExchangeV1.sol:ExchangeV1",
        "label": "buyerFees",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2822,
        "contract": "contracts/ExchangeV1.sol:ExchangeV1",
        "label": "sellerFees",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2825,
        "contract": "contracts/ExchangeV1.sol:ExchangeV1",
        "label": "transferProxy",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(TransferProxy)3824"
      },
      {
        "astId": 2828,
        "contract": "contracts/ExchangeV1.sol:ExchangeV1",
        "label": "erc20TransferProxy",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ERC20TransferProxy)3764"
      },
      {
        "astId": 2831,
        "contract": "contracts/ExchangeV1.sol:ExchangeV1",
        "label": "state",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ExchangeStateV1)3674"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_contract(ERC20TransferProxy)3764": {
        "encoding": "inplace",
        "label": "contract ERC20TransferProxy",
        "numberOfBytes": "20"
      },
      "t_contract(ExchangeStateV1)3674": {
        "encoding": "inplace",
        "label": "contract ExchangeStateV1",
        "numberOfBytes": "20"
      },
      "t_contract(TransferProxy)3824": {
        "encoding": "inplace",
        "label": "contract TransferProxy",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}