{
  "language": "Solidity",
  "sources": {
    "contracts/exchange/ExchangeDomainV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.4;\n\ncontract ExchangeDomainV1 {\n\n    enum AssetType {ETH, ERC20, ERC1155, ERC721}\n\n    struct Asset {\n        address token;\n        uint tokenId;\n        AssetType assetType;\n    }\n\n    struct OrderKey {\n        /* who signed the order */\n        address owner;\n        /* random number */\n        uint salt;\n\n        /* what has owner */\n        Asset sellAsset;\n\n        /* what wants owner */\n        Asset buyAsset;\n    }\n\n    struct Order {\n        OrderKey key;\n\n        uint selling;\n        uint buying;\n    }\n\n    /* An ECDSA signature. */\n    struct Sig {\n        /* v parameter */\n        uint8 v;\n        /* r parameter */\n        bytes32 r;\n        /* s parameter */\n        bytes32 s;\n    }\n}\n"
    },
    "contracts/ExchangeV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.4;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\n\nimport \"./exchange/ExchangeDomainV1.sol\";\nimport \"./exchange/ExchangeStateV1.sol\";\nimport \"./utils/Bytes.sol\";\nimport \"./utils/String.sol\";\nimport \"./utils/Uint.sol\";\nimport \"./proxy/ERC20TransferProxy.sol\";\nimport \"./proxy/TransferProxy.sol\";\n\ncontract ExchangeV1 is Ownable, ExchangeDomainV1 {\n    using SafeMath for uint;\n    using UintLibrary for uint;\n    using StringLibrary for string;\n    using BytesLibrary for bytes32;\n\n    enum FeeSide {NONE, SELL, BUY}\n\n    event Buy(\n        address indexed sellToken, uint256 indexed sellTokenId, uint256 sellValue,\n        address owner,\n        address buyToken, uint256 buyTokenId, uint256 buyValue,\n        address buyer,\n        uint256 amount,\n        uint256 salt\n    );\n\n    event Cancel(\n        address indexed sellToken, uint256 indexed sellTokenId,\n        address owner,\n        address buyToken, uint256 buyTokenId,\n        uint256 salt\n    );\n\n    uint256 private constant UINT256_MAX = 2 ** 256 - 1;\n\n    address payable public beneficiary;\n\n    uint256 buyerFees = 250;\n    uint256 sellerFees = 250;\n\n    TransferProxy public transferProxy;\n    ERC20TransferProxy public erc20TransferProxy;\n    ExchangeStateV1 public state;\n\n    constructor(\n        TransferProxy _transferProxy, ERC20TransferProxy _erc20TransferProxy, ExchangeStateV1 _state, address payable _beneficiary\n    ) {\n        transferProxy = _transferProxy;\n        erc20TransferProxy = _erc20TransferProxy;\n        state = _state;\n        beneficiary = _beneficiary;\n    }\n\n    function setBeneficiary(address payable newBeneficiary) external onlyOwner {\n        beneficiary = newBeneficiary;\n    }\n\n    function setBuyerFees(uint256 _buyerFees) external onlyOwner {\n        buyerFees = _buyerFees;\n    }\n\n    function setSellerFees(uint256 _sellerFees) external onlyOwner {\n        sellerFees = _sellerFees;\n    }\n\n    function exchange(\n        Order calldata order,\n        Sig calldata sig,\n        uint amount,\n        address buyer\n    ) payable external {\n        validateOrderSig(order, sig);\n        uint paying = order.buying.mul(amount).div(order.selling);\n        verifyOpenAndModifyOrderState(order.key, order.selling, amount);\n        require(order.key.sellAsset.assetType != AssetType.ETH, \"ETH is not supported on sell side\");\n        if (order.key.buyAsset.assetType == AssetType.ETH) {\n            validateEthTransfer(paying, buyerFees);\n        }\n        FeeSide feeSide = getFeeSide(order.key.sellAsset.assetType, order.key.buyAsset.assetType);\n        if (buyer == address(0x0)) {\n            buyer = msg.sender;\n        }\n        transferWithFeesPossibility(order.key.sellAsset, amount, order.key.owner, buyer, feeSide == FeeSide.SELL, buyerFees, sellerFees);\n        transferWithFeesPossibility(order.key.buyAsset, paying, msg.sender, order.key.owner, feeSide == FeeSide.BUY, sellerFees, buyerFees);\n        emitBuy(order, amount, buyer);\n    }\n\n    function validateEthTransfer(uint value, uint buyerFee) internal view {\n        uint256 buyerFeeValue = value.bp(buyerFee);\n        require(msg.value == value + buyerFeeValue, \"msg.value is incorrect\");\n    }\n\n    function cancel(OrderKey calldata key) external {\n        require(key.owner == msg.sender, \"not an owner\");\n        state.setCompleted(key, UINT256_MAX);\n        emit Cancel(key.sellAsset.token, key.sellAsset.tokenId, msg.sender, key.buyAsset.token, key.buyAsset.tokenId, key.salt);\n    }\n\n    function validateOrderSig(\n        Order memory order,\n        Sig memory sig\n    ) internal pure {\n        require(prepareMessage(order).recover(sig.v, sig.r, sig.s) == order.key.owner, \"incorrect signature\");\n    }\n\n    function prepareMessage(Order memory order) public pure returns (string memory) {\n        return keccak256(abi.encode(order)).toString();\n    }\n\n    function transferWithFeesPossibility(Asset memory firstType, uint value, address from, address to, bool hasFee, uint256 sellerFee, uint256 buyerFee) internal {\n        if (!hasFee) {\n            transfer(firstType, value, from, to);\n        } else {\n            transferWithFees(firstType, value, from, to, sellerFee, buyerFee);\n        }\n    }\n\n    function transfer(Asset memory asset, uint value, address from, address to) internal {\n        if (asset.assetType == AssetType.ETH) {\n            payable(to).transfer(value);\n        } else if (asset.assetType == AssetType.ERC20) {\n            require(asset.tokenId == 0, \"tokenId should be 0\");\n            erc20TransferProxy.erc20safeTransferFrom(IERC20(asset.token), from, to, value);\n        } else if (asset.assetType == AssetType.ERC721) {\n            require(value == 1, \"value should be 1 for ERC-721\");\n            transferProxy.erc721safeTransferFrom(IERC721(asset.token), from, to, asset.tokenId);\n        } else {\n            transferProxy.erc1155safeTransferFrom(IERC1155(asset.token), from, to, asset.tokenId, value, \"\");\n        }\n    }\n\n    function transferWithFees(Asset memory firstType, uint value, address from, address to, uint256 sellerFee, uint256 buyerFee) internal {\n        uint restValue = transferFeeToBeneficiary(firstType, from, value, sellerFee, buyerFee);\n        transfer(firstType, restValue, from, to);\n    }\n\n    function transferFeeToBeneficiary(Asset memory asset, address from, uint total, uint sellerFee, uint buyerFee) internal returns (uint) {\n        (uint restValue, uint sellerFeeValue) = subFeeInBp(total, total, sellerFee);\n        uint buyerFeeValue = total.bp(buyerFee);\n        uint beneficiaryFee = buyerFeeValue.add(sellerFeeValue);\n        if (beneficiaryFee > 0) {\n            transfer(asset, beneficiaryFee, from, beneficiary);\n        }\n        return restValue;\n    }\n\n    function emitBuy(Order memory order, uint amount, address buyer) internal {\n        emit Buy(order.key.sellAsset.token, order.key.sellAsset.tokenId, order.selling,\n            order.key.owner,\n            order.key.buyAsset.token, order.key.buyAsset.tokenId, order.buying,\n            buyer,\n            amount,\n            order.key.salt\n        );\n    }\n\n    function subFeeInBp(uint value, uint total, uint feeInBp) internal pure returns (uint newValue, uint realFee) {\n        return subFee(value, total.bp(feeInBp));\n    }\n\n    function subFee(uint value, uint fee) internal pure returns (uint newValue, uint realFee) {\n        if (value > fee) {\n            newValue = value - fee;\n            realFee = fee;\n        } else {\n            newValue = 0;\n            realFee = value;\n        }\n    }\n\n    function verifyOpenAndModifyOrderState(OrderKey memory key, uint selling, uint amount) internal {\n        uint completed = state.getCompleted(key);\n        uint newCompleted = completed.add(amount);\n        require(newCompleted <= selling, \"not enough stock of order for buying\");\n        state.setCompleted(key, newCompleted);\n    }\n\n    function getFeeSide(AssetType sellType, AssetType buyType) internal pure returns (FeeSide) {\n        if (sellType == AssetType.ERC721 && buyType == AssetType.ERC721) {\n            return FeeSide.NONE;\n        }\n        if (uint(sellType) > uint(buyType)) {\n            return FeeSide.BUY;\n        }\n        return FeeSide.SELL;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/exchange/ExchangeStateV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.4;\npragma experimental ABIEncoderV2;\n\nimport \"../role/OwnableOperatorRole.sol\";\nimport \"./ExchangeDomainV1.sol\";\n\ncontract ExchangeStateV1 is OwnableOperatorRole {\n\n    // keccak256(OrderKey) => completed\n    mapping(bytes32 => uint256) public completed;\n\n    function getCompleted(ExchangeDomainV1.OrderKey calldata key) view external returns (uint256) {\n        return completed[getCompletedKey(key)];\n    }\n\n    function setCompleted(ExchangeDomainV1.OrderKey calldata key, uint256 newCompleted) external onlyOperator {\n        completed[getCompletedKey(key)] = newCompleted;\n    }\n\n    function getCompletedKey(ExchangeDomainV1.OrderKey memory key) pure public returns (bytes32) {\n        return keccak256(abi.encodePacked(key.owner, key.sellAsset.token, key.sellAsset.tokenId, key.buyAsset.token, key.buyAsset.tokenId, key.salt));\n    }\n}\n"
    },
    "contracts/utils/Bytes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.4;\n\nlibrary BytesLibrary {\n    function toString(bytes32 value) internal pure returns (string memory) {\n        bytes memory alphabet = \"0123456789abcdef\";\n        bytes memory str = new bytes(64);\n        for (uint256 i = 0; i < 32; i++) {\n            str[i*2] = alphabet[uint8(value[i] >> 4)];\n            str[1+i*2] = alphabet[uint8(value[i] & 0x0f)];\n        }\n        return string(str);\n    }\n}\n"
    },
    "contracts/utils/String.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.4;\n\nimport \"./Uint.sol\";\n\nlibrary StringLibrary {\n    using UintLibrary for uint256;\n\n    function append(string memory a, string memory b) internal pure returns (string memory) {\n        bytes memory ba = bytes(a);\n        bytes memory bb = bytes(b);\n        bytes memory bab = new bytes(ba.length + bb.length);\n        uint k = 0;\n        for (uint i = 0; i < ba.length; i++) bab[k++] = ba[i];\n        for (uint i = 0; i < bb.length; i++) bab[k++] = bb[i];\n        return string(bab);\n    }\n\n    function append(string memory a, string memory b, string memory c) internal pure returns (string memory) {\n        bytes memory ba = bytes(a);\n        bytes memory bb = bytes(b);\n        bytes memory bc = bytes(c);\n        bytes memory bbb = new bytes(ba.length + bb.length + bc.length);\n        uint k = 0;\n        for (uint i = 0; i < ba.length; i++) bbb[k++] = ba[i];\n        for (uint i = 0; i < bb.length; i++) bbb[k++] = bb[i];\n        for (uint i = 0; i < bc.length; i++) bbb[k++] = bc[i];\n        return string(bbb);\n    }\n\n    function recover(string memory message, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        bytes memory msgBytes = bytes(message);\n        bytes memory fullMessage = concat(\n            bytes(\"\\x19Ethereum Signed Message:\\n\"),\n            bytes(msgBytes.length.toString()),\n            msgBytes,\n            new bytes(0), new bytes(0), new bytes(0), new bytes(0)\n        );\n        return ecrecover(keccak256(fullMessage), v, r, s);\n    }\n\n    function concat(bytes memory ba, bytes memory bb, bytes memory bc, bytes memory bd, bytes memory be, bytes memory bf, bytes memory bg) internal pure returns (bytes memory) {\n        bytes memory resultBytes = new bytes(ba.length + bb.length + bc.length + bd.length + be.length + bf.length + bg.length);\n        uint k = 0;\n        for (uint i = 0; i < ba.length; i++) resultBytes[k++] = ba[i];\n        for (uint i = 0; i < bb.length; i++) resultBytes[k++] = bb[i];\n        for (uint i = 0; i < bc.length; i++) resultBytes[k++] = bc[i];\n        for (uint i = 0; i < bd.length; i++) resultBytes[k++] = bd[i];\n        for (uint i = 0; i < be.length; i++) resultBytes[k++] = be[i];\n        for (uint i = 0; i < bf.length; i++) resultBytes[k++] = bf[i];\n        for (uint i = 0; i < bg.length; i++) resultBytes[k++] = bg[i];\n        return resultBytes;\n    }\n}\n"
    },
    "contracts/utils/Uint.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.4;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nlibrary UintLibrary {\n    using SafeMath for uint;\n\n    function toString(uint256 i) internal pure returns (string memory) {\n        if (i == 0) {\n            return \"0\";\n        }\n        uint j = i;\n        uint len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (i != 0) {\n            bstr[k--] = bytes1(uint8(48 + i % 10));\n            i /= 10;\n        }\n        return string(bstr);\n    }\n\n    function bp(uint value, uint bpValue) internal pure returns (uint) {\n        return value.mul(bpValue).div(10000);\n    }\n}\n"
    },
    "contracts/proxy/ERC20TransferProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../role/OwnableOperatorRole.sol\";\n\ncontract ERC20TransferProxy is OwnableOperatorRole {\n\n    function erc20safeTransferFrom(IERC20 token, address from, address to, uint256 value) external onlyOperator {\n        require(token.transferFrom(from, to, value), \"failure while transferring\");\n    }\n}\n"
    },
    "contracts/proxy/TransferProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\n\nimport \"../role/OwnableOperatorRole.sol\";\n\ncontract TransferProxy is OwnableOperatorRole {\n\n    function erc721safeTransferFrom(IERC721 token, address from, address to, uint256 tokenId) external onlyOperator {\n        token.safeTransferFrom(from, to, tokenId);\n    }\n\n    function erc1155safeTransferFrom(IERC1155 token, address from, address to, uint256 id, uint256 value, bytes calldata data) external onlyOperator {\n        token.safeTransferFrom(from, to, id, value, data);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/role/OwnableOperatorRole.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./OperatorRole.sol\";\n\ncontract OwnableOperatorRole is Ownable, OperatorRole {\n    function addOperator(address account) external onlyOwner {\n        _addOperator(account);\n    }\n\n    function removeOperator(address account) external onlyOwner {\n        _removeOperator(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/role/OperatorRole.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.4;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\nimport \"../utils/Roles.sol\";\n\ncontract OperatorRole is Context {\n    using Roles for Roles.Role;\n\n    event OperatorAdded(address indexed account);\n    event OperatorRemoved(address indexed account);\n\n    Roles.Role private _operators;\n\n    modifier onlyOperator() {\n        require(isOperator(_msgSender()), \"OperatorRole: caller does not have the Operator role\");\n        _;\n    }\n\n    function isOperator(address account) public view returns (bool) {\n        return _operators.has(account);\n    }\n\n    function _addOperator(address account) internal {\n        _operators.add(account);\n        emit OperatorAdded(account);\n    }\n\n    function _removeOperator(address account) internal {\n        _operators.remove(account);\n        emit OperatorRemoved(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/utils/Roles.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.4;\n\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}